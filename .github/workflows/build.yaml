name: Build ZFS Kmods

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if container exists'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '11 8 * * *'  # Daily at 8:11 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  query-versions:
    runs-on: ubuntu-latest
    outputs:
      kernel-version: ${{ steps.kernel-info.outputs.kernel-version }}
      kernel-major-minor: ${{ steps.kernel-info.outputs.kernel-major-minor }}
      fedora-version: ${{ steps.kernel-info.outputs.fedora-version }}
      zfs-tag: ${{ steps.zfs-version.outputs.zfs-tag }}
      zfs-version: ${{ steps.zfs-version.outputs.zfs-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Query kernel and OS version from container labels
        id: kernel-info
        run: |
          INFO_JSON=$(./scripts/query-kernel-info.sh)

          KERNEL_VERSION=$(echo "$INFO_JSON" | jq -r '."kernel-version"')
          KERNEL_MAJOR_MINOR=$(echo "$INFO_JSON" | jq -r '."kernel-major-minor"')
          FEDORA_VERSION=$(echo "$INFO_JSON" | jq -r '."fedora-version"')

          echo "kernel-version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "kernel-major-minor=$KERNEL_MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "fedora-version=$FEDORA_VERSION" >> $GITHUB_OUTPUT
          echo "Found kernel version: $KERNEL_VERSION"
          echo "Found kernel major.minor: $KERNEL_MAJOR_MINOR"
          echo "Found Fedora version: $FEDORA_VERSION"

      - name: Find latest ZFS version
        id: zfs-version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          INFO_JSON=$(./scripts/query-zfs-version.sh)

          ZFS_TAG=$(echo "$INFO_JSON" | jq -r '."zfs-tag"')
          ZFS_VERSION=$(echo "$INFO_JSON" | jq -r '."zfs-version"')

          echo "zfs-tag=$ZFS_TAG" >> $GITHUB_OUTPUT
          echo "zfs-version=$ZFS_VERSION" >> $GITHUB_OUTPUT
          echo "Found ZFS version: $ZFS_TAG"

      - name: Check ZFS-kernel compatibility
        run: |
          ./scripts/check-compatibility.sh \
            "${{ steps.zfs-version.outputs.zfs-tag }}" \
            "${{ steps.kernel-info.outputs.kernel-major-minor }}"

  check-existing:
    needs: query-versions
    runs-on: ubuntu-latest
    outputs:
      container-exists: ${{ steps.check.outputs.container-exists }}
      target-tag: ${{ steps.check.outputs.target-tag }}
    
    steps:
      - name: Check if container already exists with valid attestations
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ZFS_VERSION="${{ needs.query-versions.outputs.zfs-version }}"
          KERNEL_VERSION="${{ needs.query-versions.outputs.kernel-version }}"
          TARGET_TAG="zfs-${ZFS_VERSION}_kernel-${KERNEL_VERSION}"
          FORCE_REBUILD="${{ inputs.force_rebuild }}"

          set +e
          ./scripts/check-container.sh \
            --zfs-version "$ZFS_VERSION" \
            --kernel-version "$KERNEL_VERSION" \
            --require-attestations true \
            --github-output "$GITHUB_OUTPUT"
          RESULT=$?
          set -e

          if [[ "$FORCE_REBUILD" == "true" ]]; then
            echo "ðŸ”„ Force rebuild requested - build will proceed anyway"
          elif [[ $RESULT -eq 0 ]]; then
            echo "ðŸš€ Build will be skipped - valid container already exists"
          else
            echo "ðŸ”¨ Build will proceed"
          fi

  build:
    needs: [query-versions, check-existing]
    if: needs.query-versions.result == 'success' && (needs.check-existing.outputs.container-exists != 'true' || inputs.force_rebuild)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build container image
        id: build
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2.13
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: |
            zfs-${{ needs.query-versions.outputs.zfs-version }}_kernel-${{ needs.query-versions.outputs.kernel-version }}
          containerfiles: |
            ./Containerfile
          build-args: |
            ZFS_VERSION=${{ needs.query-versions.outputs.zfs-tag }}
            FEDORA_VERSION=${{ needs.query-versions.outputs.fedora-version }}
            KERNEL_MAJOR_MINOR=${{ needs.query-versions.outputs.kernel-major-minor }}

      - name: Log in to Container Registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to registry
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2.8
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
