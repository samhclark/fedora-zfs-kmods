name: Cleanup Old Container Images

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (true/false)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Get package versions
        id: versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Querying all package versions..."
          
          # Query all package versions
          versions_json=$(gh api "/user/packages/container/fedora-zfs-kmods/versions" --paginate)
          echo "📦 Total versions found: $(echo "$versions_json" | jq length)"
          
          # Calculate 90-day cutoff
          cutoff_date=$(date -d "90 days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "📅 Cutoff date: $cutoff_date"
          
          # Find ALL versioned tags (not limited yet)
          all_versioned_tags=$(echo "$versions_json" | jq -r '
            .[] | select(.metadata.container.tags[]? | test("^zfs-.*_kernel-.*$")) |
            {created_at: .created_at, tag: .metadata.container.tags[], id: .id}' |
            jq -s 'sort_by(.created_at) | reverse')
          
          # Count total versioned tags available
          total_versioned_count=$(echo "$all_versioned_tags" | jq length)
          echo "🏷️  Total versioned tags found: $total_versioned_count"
          
          # Early safety check - do we have enough versioned tags in the repository?
          if [[ "$total_versioned_count" -lt 3 ]]; then
            echo "❌ EARLY SAFETY CHECK FAILED: Only $total_versioned_count versioned tags exist in repository (minimum 3 required)"
            echo "📋 Available versioned tags:"
            echo "$all_versioned_tags" | jq -r '.[].tag'
            echo ""
            echo "🚨 Cannot proceed with cleanup - insufficient versioned tags to maintain minimum policy"
            echo "This indicates the repository needs more tagged releases before cleanup can run safely"
            exit 1
          fi
          
          # Select the 3 most recent versioned tags to protect
          protected_versioned_tags=$(echo "$all_versioned_tags" | jq -r '.[0:3] | .[].tag')
          echo "🛡️  Protected tags (3 most recent):"
          echo "$protected_versioned_tags"
          
          # Build protected digests list from retained images
          echo "🔐 Building protected attestation digests..."
          protected_digests=()
          while IFS= read -r tag; do
              if [[ -n "$tag" ]]; then
                  digest=$(echo "$versions_json" | jq -r --arg tag "$tag" '.[] | select(.metadata.container.tags[]? == $tag) | .name')
                  if [[ -n "$digest" && "$digest" != "null" ]]; then
                      attestation_tag="sha256-${digest#sha256:}"
                      protected_digests+=("$attestation_tag")
                      echo "  $tag -> $attestation_tag"
                  fi
              fi
          done <<< "$protected_versioned_tags"
          
          # Create regex pattern for protected tags
          protected_pattern=$(echo "$protected_versioned_tags" | tr '\n' '|' | sed 's/|$//')
          
          # Identify deletion candidates
          echo "🗑️  Identifying deletion candidates..."
          delete_ids=$(echo "$versions_json" | jq -r --arg cutoff "$cutoff_date" --argjson protected "$(printf '%s\n' "${protected_digests[@]}" | jq -R . | jq -s .)" --arg protected_tags "$protected_pattern" '
            [.[] | select(
              (.created_at < $cutoff) and
              ((.metadata.container.tags[]? | test($protected_tags)) | not) and
              ((.metadata.container.tags[]? | IN($protected[])) | not)
            ) | .id] | join(",")')
          
          echo "🔍 Safety validation:"
          echo "  - Total versioned tags in repository: $total_versioned_count"
          echo "  - Versioned tags being protected: 3"
          echo "  - Protected attestations: ${#protected_digests[@]}"
          echo "✅ Safety check passed: $total_versioned_count versioned tags available, protecting 3 most recent"
          
          # Set outputs
          if [[ -n "$delete_ids" && "$delete_ids" != "" ]]; then
            candidate_count=$(echo "$delete_ids" | tr ',' '\n' | wc -l)
            echo "📊 Found $candidate_count deletion candidates"
            echo "delete_versions=$delete_ids" >> $GITHUB_OUTPUT
            
            # Log what would be deleted for dry-run visibility
            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "🧪 DRY RUN - Would delete the following versions:"
              echo "$versions_json" | jq -r --arg ids "$delete_ids" '
                .[] | select(.id | tostring | IN($ids | split(","))) |
                "\(.metadata.container.tags[]? // "<untagged>") - \(.created_at) - ID: \(.id)"' | sort
              echo ""
              echo "📋 Deletion summary:"
              echo "  - Total versions to delete: $candidate_count"
              echo "  - Versions that will remain: $(($(echo "$versions_json" | jq length) - candidate_count))"
            else
              echo "🗑️  Proceeding with deletion of $candidate_count versions"
            fi
          else
            echo "✅ No versions eligible for deletion"
            echo "delete_versions=" >> $GITHUB_OUTPUT
          fi
      
      - name: Delete old package versions
        uses: actions/delete-package-versions@v5
        if: steps.versions.outputs.delete_versions != '' && inputs.dry_run != 'true'
        with:
          package-name: 'fedora-zfs-kmods'
          package-type: 'container'
          package-version-ids: ${{ steps.versions.outputs.delete_versions }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Dry run summary
        if: inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN COMPLETE"
          echo "This was a dry run - no versions were actually deleted."
          echo ""
          if [[ -n "${{ steps.versions.outputs.delete_versions }}" ]]; then
            echo "📋 Deletion candidates found:"
            echo "${{ steps.versions.outputs.delete_versions }}" | tr ',' '\n' | nl -w2 -s'. ID: '
            echo ""
            echo "To perform actual cleanup, run this workflow with dry_run=false"
          else
            echo "✅ No versions were eligible for deletion"
            echo "All versions are either:"
            echo "  - Within the 90-day retention window"
            echo "  - One of the 3 most recent versioned tags"  
            echo "  - Attestations for protected images"
          fi
          echo ""
          echo "🔒 Safety mechanisms active:"
          echo "  - Minimum 3 versioned tags protected"
          echo "  - Attestations preserved for all retained images"
          echo "  - 90-day retention window enforced"
      
      - name: Cleanup completion summary
        if: inputs.dry_run != 'true' && steps.versions.outputs.delete_versions != ''
        run: |
          echo "✅ CLEANUP COMPLETED"
          echo "Successfully deleted older container versions while preserving:"
          echo "  - 3 most recent versioned tags"
          echo "  - All corresponding attestations"
          echo "  - All versions within 90-day window"